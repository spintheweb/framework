#!/bin/bash
# Webspinner Type C Release Script
# Creates a self-extracting installer with embedded runtime and configuration wizard
# Usage: ./tasks/release-type-c.sh

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}Webspinner Type C Installer Release Generator${NC}"
echo "=============================================="
echo ""

# Check prerequisites
if ! command -v base64 &> /dev/null; then
    echo -e "${RED}Error: 'base64' command not found.${NC}"
    exit 1
fi

if ! command -v tar &> /dev/null; then
    echo -e "${RED}Error: 'tar' command not found.${NC}"
    exit 1
fi

if ! command -v gzip &> /dev/null; then
    echo -e "${RED}Error: 'gzip' command not found.${NC}"
    exit 1
fi

if ! command -v gh &> /dev/null; then
    echo -e "${YELLOW}Warning: 'gh' CLI not found. GitHub release creation will be skipped.${NC}"
    echo -e "${YELLOW}Install gh CLI: https://cli.github.com/${NC}"
    GH_AVAILABLE=false
else
    GH_AVAILABLE=true
fi

# Get current directory (should be repo root)
REPO_ROOT="$(cd "$(dirname "$0")/.." && pwd)"
cd "$REPO_ROOT"

echo "Repository: $REPO_ROOT"
echo ""

# Prompt for version
read -p "Enter version (e.g., v1.0.0): " VERSION

if [ -z "$VERSION" ]; then
    echo -e "${RED}Error: Version cannot be empty${NC}"
    exit 1
fi

# Ensure version starts with 'v'
if [[ ! "$VERSION" =~ ^v ]]; then
    VERSION="v$VERSION"
fi

echo -e "${GREEN}Creating Type C installer for version: $VERSION${NC}"
echo ""

# Check if git tag already exists
if git rev-parse "$VERSION" >/dev/null 2>&1; then
    echo -e "${YELLOW}Warning: Tag $VERSION already exists${NC}"
    read -p "Continue anyway? (y/n): " CONTINUE
    if [[ ! "$CONTINUE" =~ ^[Yy]$ ]]; then
        echo "Aborted."
        exit 0
    fi
fi

# Create temporary directory for building
TEMP_DIR=$(mktemp -d)
PAYLOAD_DIR="$TEMP_DIR/webspinner-payload"
mkdir -p "$PAYLOAD_DIR"

echo -e "${BLUE}Step 1: Creating payload archive...${NC}"

# Copy runtime files to payload directory
cp -r stwComponents "$PAYLOAD_DIR/"
cp -r stwContents "$PAYLOAD_DIR/"
cp -r stwElements "$PAYLOAD_DIR/"
cp -r stwStyles "$PAYLOAD_DIR/"
cp -r webbaselets "$PAYLOAD_DIR/"
cp -r public "$PAYLOAD_DIR/"
cp stwSpinner.ts "$PAYLOAD_DIR/"
cp deno.json "$PAYLOAD_DIR/"
cp deno.lock "$PAYLOAD_DIR/"
cp LICENSE "$PAYLOAD_DIR/"
cp README.md "$PAYLOAD_DIR/"

# Copy .env.example as .env (with safe defaults)
cp .env.example "$PAYLOAD_DIR/.env"

# Remove sensitive/unnecessary files from payload
find "$PAYLOAD_DIR" -type f \( -name "*.pem" -o -name "*.key" -o -name ".DS_Store" -o -name "Thumbs.db" \) -delete
# Remove test data files
rm -f "$PAYLOAD_DIR/public/.data/users.json" 2>/dev/null || true
rm -f "$PAYLOAD_DIR/public/.data/datasources.json" 2>/dev/null || true
rm -f "$PAYLOAD_DIR/public/.data/datasources.production.json" 2>/dev/null || true

echo -e "${GREEN}Payload directory prepared${NC}"

# Create payload tarball
PAYLOAD_TAR="$TEMP_DIR/payload.tar.gz"
tar -czf "$PAYLOAD_TAR" -C "$TEMP_DIR" webspinner-payload
echo -e "${GREEN}Payload archive created: $(du -h "$PAYLOAD_TAR" | cut -f1)${NC}"

# Create the installer script
OUTPUT_DIR="$REPO_ROOT/deployments/deploy"
mkdir -p "$OUTPUT_DIR"
INSTALLER_FILE="$OUTPUT_DIR/webspinner-installer-$VERSION.sh"

echo -e "${BLUE}Step 2: Generating self-extracting installer...${NC}"

# Write installer header
cat > "$INSTALLER_FILE" << 'INSTALLER_HEADER'
#!/bin/bash
# Webspinner Installer
# Self-extracting installer with configuration wizard
# Generated by release-type-c.sh

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}╔═══════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║     Webspinner Installation Wizard           ║${NC}"
echo -e "${BLUE}╚═══════════════════════════════════════════════╝${NC}"
echo ""

# Check if running as root
if [ "$EUID" -eq 0 ]; then
    echo -e "${YELLOW}Warning: Running as root. Installation will be system-wide.${NC}"
    INSTALL_DIR="/opt/webspinner"
    SERVICE_INSTALL=true
else
    echo -e "${YELLOW}Running as user. Installation will be in your home directory.${NC}"
    INSTALL_DIR="$HOME/webspinner"
    SERVICE_INSTALL=false
fi

# Check prerequisites
echo -e "${BLUE}Checking prerequisites...${NC}"

if ! command -v deno &> /dev/null; then
    echo -e "${RED}Error: Deno is not installed.${NC}"
    echo "Please install Deno from: https://deno.land/"
    echo "  curl -fsSL https://deno.land/install.sh | sh"
    exit 1
fi

DENO_VERSION=$(deno --version | head -n1)
echo -e "${GREEN}✓ $DENO_VERSION${NC}"

# Prompt for installation directory
echo ""
read -p "Installation directory [$INSTALL_DIR]: " USER_INSTALL_DIR
if [ -n "$USER_INSTALL_DIR" ]; then
    INSTALL_DIR="$USER_INSTALL_DIR"
fi

# Create installation directory
mkdir -p "$INSTALL_DIR"
echo -e "${GREEN}Installation directory: $INSTALL_DIR${NC}"

# Extract payload
echo ""
echo -e "${BLUE}Extracting files...${NC}"
ARCHIVE_LINE=$(awk '/^__ARCHIVE_BELOW__/ {print NR + 1; exit 0;}' "$0")
tail -n+$ARCHIVE_LINE "$0" | base64 -d | tar -xzf - -C "$INSTALL_DIR" --strip-components=1

echo -e "${GREEN}✓ Files extracted${NC}"

# Configuration wizard
echo ""
echo -e "${BLUE}╔═══════════════════════════════════════════════╗${NC}"
echo -e "${BLUE}║          Configuration Wizard                 ║${NC}"
echo -e "${BLUE}╚═══════════════════════════════════════════════╝${NC}"
echo ""

# Prompt for configuration values
read -p "Domain/Hostname [localhost]: " HOST
HOST=${HOST:-localhost}

read -p "Port [8080]: " PORT
PORT=${PORT:-8080}

read -p "Use TLS/HTTPS? (y/n) [n]: " USE_TLS
USE_TLS=${USE_TLS:-n}

if [[ "$USE_TLS" =~ ^[Yy]$ ]]; then
    read -p "Certificate file path: " CERTFILE
    read -p "Private key file path: " KEYFILE
    PORT=${PORT:-443}
else
    CERTFILE=""
    KEYFILE=""
fi

read -p "Session timeout (hours) [24]: " SESSION_TIMEOUT
SESSION_TIMEOUT=${SESSION_TIMEOUT:-24}

read -p "Max concurrent users (0=unlimited) [0]: " MAX_USERS
MAX_USERS=${MAX_USERS:-0}

read -p "Max upload size (MB) [200]: " MAX_UPLOADSIZE
MAX_UPLOADSIZE=${MAX_UPLOADSIZE:-200}

read -p "Allow dev/studio mode? (y/n) [n]: " ALLOW_DEV
if [[ "$ALLOW_DEV" =~ ^[Yy]$ ]]; then
    ALLOW_DEV="true"
else
    ALLOW_DEV="false"
fi

# Create .env file
echo ""
echo -e "${BLUE}Creating .env configuration...${NC}"
cat > "$INSTALL_DIR/.env" << EOF
# Webspinner Environment Configuration
# Generated during installation
HOST=$HOST
PORT=$PORT
CERTFILE=$CERTFILE
KEYFILE=$KEYFILE
SESSION_TIMEOUT=$SESSION_TIMEOUT
MAX_USERS=$MAX_USERS
SITE_ROOT="./public"
SITE_WEBBASE="./public/.data/webapplication.wbdl"
COMMON_WEBBASE="./webbaselets/stwCommon.wbdl"
STUDIO_WEBBASE="./webbaselets/stwStudio.wbdl"
MAX_UPLOADSIZE=$MAX_UPLOADSIZE
SECURITY="./public/.data/users.json"
ALLOW_DEV=$ALLOW_DEV
EOF

echo -e "${GREEN}✓ Configuration saved to $INSTALL_DIR/.env${NC}"

# Create default data files if they don't exist
mkdir -p "$INSTALL_DIR/public/.data"

if [ ! -f "$INSTALL_DIR/public/.data/users.json" ]; then
    cat > "$INSTALL_DIR/public/.data/users.json" << 'EOF'
{
  "users": []
}
EOF
    echo -e "${GREEN}✓ Created default users.json${NC}"
fi

if [ ! -f "$INSTALL_DIR/public/.data/datasources.json" ]; then
    cat > "$INSTALL_DIR/public/.data/datasources.json" << 'EOF'
{
  "datasources": []
}
EOF
    echo -e "${GREEN}✓ Created default datasources.json${NC}"
fi

# Install systemd service (if root)
if [ "$SERVICE_INSTALL" = true ]; then
    echo ""
    read -p "Install systemd service for auto-start? (y/n) [y]: " INSTALL_SERVICE
    INSTALL_SERVICE=${INSTALL_SERVICE:-y}
    
    if [[ "$INSTALL_SERVICE" =~ ^[Yy]$ ]]; then
        echo -e "${BLUE}Creating systemd service...${NC}"
        
        cat > /etc/systemd/system/webspinner.service << EOF
[Unit]
Description=Webspinner Web Application Server
After=network.target

[Service]
Type=simple
User=$SUDO_USER
WorkingDirectory=$INSTALL_DIR
ExecStart=/usr/bin/env deno run --allow-all stwSpinner.ts
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

        systemctl daemon-reload
        systemctl enable webspinner
        
        echo -e "${GREEN}✓ Systemd service installed${NC}"
        echo -e "${YELLOW}Service management:${NC}"
        echo "  Start:   sudo systemctl start webspinner"
        echo "  Stop:    sudo systemctl stop webspinner"
        echo "  Status:  sudo systemctl status webspinner"
        echo "  Logs:    sudo journalctl -u webspinner -f"
        echo ""
        
        read -p "Start service now? (y/n) [y]: " START_NOW
        START_NOW=${START_NOW:-y}
        if [[ "$START_NOW" =~ ^[Yy]$ ]]; then
            systemctl start webspinner
            echo -e "${GREEN}✓ Service started${NC}"
        fi
    fi
fi

# Create start script for non-service installations
if [ "$SERVICE_INSTALL" = false ]; then
    echo ""
    echo -e "${BLUE}Creating start script...${NC}"
    cat > "$INSTALL_DIR/start.sh" << 'EOF'
#!/bin/bash
cd "$(dirname "$0")"
deno run --allow-all stwSpinner.ts
EOF
    chmod +x "$INSTALL_DIR/start.sh"
    echo -e "${GREEN}✓ Start script created: $INSTALL_DIR/start.sh${NC}"
fi

# Final instructions
echo ""
echo -e "${GREEN}╔═══════════════════════════════════════════════╗${NC}"
echo -e "${GREEN}║     Installation Complete!                    ║${NC}"
echo -e "${GREEN}╚═══════════════════════════════════════════════╝${NC}"
echo ""
echo -e "Installation directory: ${BLUE}$INSTALL_DIR${NC}"
echo -e "Configuration file: ${BLUE}$INSTALL_DIR/.env${NC}"
echo ""

if [ "$SERVICE_INSTALL" = false ]; then
    echo -e "${YELLOW}To start Webspinner:${NC}"
    echo "  cd $INSTALL_DIR"
    echo "  ./start.sh"
    echo ""
fi

echo -e "${YELLOW}Access your site at:${NC}"
if [[ "$USE_TLS" =~ ^[Yy]$ ]]; then
    echo "  https://$HOST:$PORT"
else
    echo "  http://$HOST:$PORT"
fi
echo ""

exit 0

__ARCHIVE_BELOW__
INSTALLER_HEADER

# Append base64-encoded payload
echo -e "${BLUE}Embedding payload...${NC}"
base64 "$PAYLOAD_TAR" >> "$INSTALLER_FILE"

# Make installer executable
chmod +x "$INSTALLER_FILE"

echo -e "${GREEN}✓ Installer created: $INSTALLER_FILE${NC}"

# Generate SHA256 checksum
echo ""
echo -e "${BLUE}Step 3: Generating checksum...${NC}"
CHECKSUM_FILE="$INSTALLER_FILE.sha256"
cd "$OUTPUT_DIR"
sha256sum "$(basename "$INSTALLER_FILE")" > "$(basename "$CHECKSUM_FILE")"
cd "$REPO_ROOT"
echo -e "${GREEN}✓ Checksum: $(cat "$CHECKSUM_FILE")${NC}"

# Get file size
INSTALLER_SIZE=$(du -h "$INSTALLER_FILE" | cut -f1)
echo -e "${BLUE}Installer size: $INSTALLER_SIZE${NC}"

# Clean up temporary directory
rm -rf "$TEMP_DIR"
echo -e "${GREEN}✓ Cleaned up temporary files${NC}"

# Git tag
echo ""
echo -e "${BLUE}Step 4: Creating Git tag...${NC}"
read -p "Create git tag '$VERSION'? (y/n) [y]: " CREATE_TAG
CREATE_TAG=${CREATE_TAG:-y}

if [[ "$CREATE_TAG" =~ ^[Yy]$ ]]; then
    if git rev-parse "$VERSION" >/dev/null 2>&1; then
        echo -e "${YELLOW}Tag $VERSION already exists. Skipping tag creation.${NC}"
    else
        git tag -a "$VERSION" -m "Release $VERSION (Type C Installer)"
        echo -e "${GREEN}✓ Git tag created: $VERSION${NC}"
        
        read -p "Push tag to remote? (y/n) [y]: " PUSH_TAG
        PUSH_TAG=${PUSH_TAG:-y}
        if [[ "$PUSH_TAG" =~ ^[Yy]$ ]]; then
            git push origin "$VERSION"
            echo -e "${GREEN}✓ Tag pushed to remote${NC}"
        fi
    fi
fi

# GitHub Release
echo ""
if [ "$GH_AVAILABLE" = true ]; then
    echo -e "${BLUE}Step 5: Creating GitHub Release...${NC}"
    read -p "Create GitHub release? (y/n) [y]: " CREATE_RELEASE
    CREATE_RELEASE=${CREATE_RELEASE:-y}
    
    if [[ "$CREATE_RELEASE" =~ ^[Yy]$ ]]; then
        RELEASE_NOTES="## Webspinner $VERSION - Type C Installer

### Self-Extracting Installer
This is a self-extracting bash installer that includes:
- Complete Webspinner runtime
- Interactive configuration wizard
- Automatic .env generation
- Optional systemd service setup
- Dependency checking

### Installation
\`\`\`bash
chmod +x webspinner-installer-$VERSION.sh
sudo ./webspinner-installer-$VERSION.sh
# Or for user installation:
./webspinner-installer-$VERSION.sh
\`\`\`

### Requirements
- Linux/Unix system
- Deno runtime
- Bash shell

### Verification
\`\`\`bash
sha256sum -c webspinner-installer-$VERSION.sh.sha256
\`\`\`

For more information, see the [documentation](https://github.com/spintheweb/webspinner)."

        gh release create "$VERSION" \
            --title "Release $VERSION (Type C)" \
            --notes "$RELEASE_NOTES" \
            "$INSTALLER_FILE" \
            "$CHECKSUM_FILE"
        
        echo -e "${GREEN}✓ GitHub release created${NC}"
        echo -e "${BLUE}View at: https://github.com/spintheweb/webspinner/releases/tag/$VERSION${NC}"
    fi
else
    echo -e "${YELLOW}Step 5: GitHub CLI not available${NC}"
    echo "To create release manually:"
    echo "  1. Go to: https://github.com/spintheweb/webspinner/releases/new"
    echo "  2. Choose tag: $VERSION"
    echo "  3. Upload: $INSTALLER_FILE"
    echo "  4. Upload: $CHECKSUM_FILE"
fi

echo ""
echo -e "${GREEN}═══════════════════════════════════════════════${NC}"
echo -e "${GREEN}Type C Release Complete!${NC}"
echo -e "${GREEN}═══════════════════════════════════════════════${NC}"
echo ""
echo -e "Installer: ${BLUE}$INSTALLER_FILE${NC}"
echo -e "Checksum:  ${BLUE}$CHECKSUM_FILE${NC}"
echo -e "Size:      ${BLUE}$INSTALLER_SIZE${NC}"
echo ""
